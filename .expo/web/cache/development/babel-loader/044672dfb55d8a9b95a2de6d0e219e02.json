{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport React, { useEffect, useState } from 'react';\nimport * as Location from 'expo-location';\nimport AppLoading from 'expo-app-loading';\nimport { useFonts, Comfortaa_700Bold, Inter_400Regular } from '@expo-google-fonts/dev';\nimport Header from \"./components/Header\";\nimport { colors, size, fonts } from \"./utils\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMsg = _useState4[0],\n      setErrorMsg = _useState4[1];\n\n  var _useState5 = useState('I'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      unitSystem = _useState6[0],\n      setUnitSystem = _useState6[1];\n\n  var _useFonts = useFonts({\n    Comfortaa_700Bold: Comfortaa_700Bold,\n    Inter_400Regular: Inter_400Regular\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  useEffect(function () {\n    loadApp();\n  }, [unitSystem]);\n\n  function loadApp() {\n    var _await$Location$reque, status, location, _location$coords, latitude, longitude, weatherUrl, response, result;\n\n    return _regeneratorRuntime.async(function loadApp$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setWeather(null);\n            setErrorMsg(null);\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n          case 5:\n            _await$Location$reque = _context.sent;\n            status = _await$Location$reque.status;\n\n            if (!(status !== 'granted')) {\n              _context.next = 10;\n              break;\n            }\n\n            setErrorMsg('Access to location is required to run this app.');\n            return _context.abrupt(\"return\");\n\n          case 10:\n            ;\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync());\n\n          case 13:\n            location = _context.sent;\n            _location$coords = location.coords, latitude = _location$coords.latitude, longitude = _location$coords.longitude;\n            weatherUrl = \"https://api.weatherbit.io/v2.0/current?lat=\" + latitude + \"&lon=\" + longitude + \"&key=\" + \"96769f13f0104a86951174bc53a8804d\" + \"&units=\" + unitSystem;\n            _context.next = 18;\n            return _regeneratorRuntime.awrap(fetch(weatherUrl));\n\n          case 18:\n            response = _context.sent;\n            _context.next = 21;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 21:\n            result = _context.sent;\n\n            if (response.ok) {\n              setWeather(result);\n            } else {\n              setErrorMsg(result.message);\n            }\n\n            _context.next = 28;\n            break;\n\n          case 25:\n            _context.prev = 25;\n            _context.t0 = _context[\"catch\"](2);\n            setErrorMsg(_context.t0.message);\n\n          case 28:\n            ;\n\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 25]], Promise);\n  }\n\n  ;\n\n  if (!fontsLoaded) {\n    return _jsx(View, {\n      children: _jsx(AppLoading, {})\n    });\n  } else {\n    if (weather) {\n      return _jsx(View, {\n        style: styles.container,\n        children: _jsx(Text, {\n          children: _jsx(Header, {\n            weather: weather\n          })\n        })\n      });\n    } else if (errorMsg) {\n      return _jsx(View, {\n        style: styles.container,\n        children: _jsx(Text, {\n          style: styles.text,\n          children: errorMsg\n        })\n      });\n    } else {\n      return _jsx(View, {\n        style: styles.container,\n        children: _jsx(Text, {\n          style: styles.text,\n          children: \"Loading...\"\n        })\n      });\n    }\n  }\n\n  ;\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.BACKGROUND_COLOR\n  },\n  text: {\n    fontFamily: fonts.HEADER,\n    fontSize: size.BODY,\n    color: colors.FONT_COLOR,\n    textAlign: 'center',\n    top: Dimensions.get('window').height / 2\n  }\n});","map":{"version":3,"names":["StatusBar","React","useEffect","useState","Location","AppLoading","useFonts","Comfortaa_700Bold","Inter_400Regular","Header","colors","size","fonts","App","weather","setWeather","errorMsg","setErrorMsg","unitSystem","setUnitSystem","fontsLoaded","loadApp","requestForegroundPermissionsAsync","status","getCurrentPositionAsync","location","coords","latitude","longitude","weatherUrl","fetch","response","json","result","ok","message","styles","container","text","StyleSheet","create","flex","backgroundColor","BACKGROUND_COLOR","fontFamily","HEADER","fontSize","BODY","color","FONT_COLOR","textAlign","top","Dimensions","get","height"],"sources":["C:/Users/Alex/Documents/Projects/weather-tips-app/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View, Dimensions, useWindowDimensions } from 'react-native';\nimport React, { useEffect, useState } from 'react';\nimport * as Location from 'expo-location';\nimport AppLoading from 'expo-app-loading';\nimport { useFonts, Comfortaa_700Bold, Inter_400Regular } from '@expo-google-fonts/dev';\n\nimport { WEATHER_API_KEY } from '@env'\nimport Header from './components/Header';\nimport { colors, size, fonts } from './utils';\n\n\n \n\nexport default function App() {\n  const [weather, setWeather] = useState(null); // A state that holds the information about weather.\n  const [errorMsg, setErrorMsg] = useState(null); // State that holds information about error messages\n  const [unitSystem, setUnitSystem] = useState('I'); // Determines imperial or \n\n  let [fontsLoaded] = useFonts({\n    Comfortaa_700Bold, Inter_400Regular\n  });\n\n  // useEffect is a custom hook that runs once initially.\n  useEffect(() => {\n    loadApp()\n  }, [unitSystem]);  // When unitSystem changes, useEffect will run.\n\n  async function loadApp() {\n    setWeather(null);\n    setErrorMsg(null);\n    try {\n\n      let { status } = await Location.requestForegroundPermissionsAsync();\n\n      if(status !== 'granted') {\n        setErrorMsg('Access to location is required to run this app.');\n        return\n      };\n\n      const location = await Location.getCurrentPositionAsync();\n\n      const {latitude, longitude} = location.coords;\n\n      const weatherUrl = `https://api.weatherbit.io/v2.0/current?lat=${latitude}&lon=${longitude}&key=${WEATHER_API_KEY}&units=${unitSystem}`;\n\n      const response = await fetch(weatherUrl);\n\n      const result = await response.json();\n      \n      if(response.ok) {\n        setWeather(result);\n      } else {\n        setErrorMsg(result.message)\n      }\n    } catch(error) {\n      setErrorMsg(error.message);\n    };\n  };\n\n  //TODO change to a splash screen to get rid of scary yellow text.\n  if (!fontsLoaded) {\n    return (\n      <View>\n        <AppLoading /> \n      </View>\n    )\n  } else {\n    // Normal display\n    if(weather) { \n      return (\n        <View style={styles.container}>\n          <Text><Header weather={weather}></Header></Text>\n        </View>\n      )\n    // Error page\n    } else if (errorMsg){\n      return(\n        <View style={styles.container}>\n           <Text style={styles.text}>{errorMsg}</Text>\n        </View>\n        \n      );\n    // Misc. loading. Will be deleted when splash page is implemented.\n    } else {\n      return (\n        <View style={styles.container}>\n          <Text style={styles.text}>Loading...</Text>\n        </View>\n      )\n    }\n  };\n    \n  };\n \n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.BACKGROUND_COLOR,\n  },\n  text: {\n    fontFamily: fonts.HEADER,\n    fontSize: size.BODY,\n    color: colors.FONT_COLOR,\n    textAlign: 'center',\n    top: Dimensions.get('window').height/2,\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}